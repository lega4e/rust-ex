/* BEGIN */





/*
 * –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
 *
 * –†–∞–∑–º–µ—Ä –ó–Ω–∞–∫–æ–≤—ã–π –ë–µ–∑–∑–Ω–∞–∫–æ–≤—ã–π
 * 8 –±–∏—Ç    i8       u8
 * 16 –±–∏—Ç   i16      u16
 * 32 –±–∏—Ç–∞  i32      u32
 * 64 –±–∏—Ç–∞  i64      u64
 * 128 –±–∏—Ç  i128     u128
 * arch     isize    usize
 *
 * 
 * –õ–∏—Ç–µ—Ä–∞–ª—ã —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
 *
 * –ß–∏—Å–ª–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã        –ü—Ä–∏–º–µ—Ä
 * –î–µ—Å—è—Ç–∏—á–Ω—ã–π          98_222
 * –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π   0xff
 * –í–æ—Å—å–º–µ—Ä–∏—á–Ω—ã–π        0o77
 * –ë–∏–Ω–∞—Ä–Ω—ã–π            0b1111_0000
 * –ë–∞–π—Ç–æ–≤—ã–π            (—Ç–æ–ª—å–∫–æ u8) b'A'
 *
 *
 * –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π: f32, f64
 */





fn main()
{
    /* –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ */
    let x: i128 = 1_000_000_000_000_000_000;
    let y: i128 = 32;

    let xaddy: i128 = x + y;
    let xsuby: i128 = x - y;
    let xmuly: i128 = x * y;
    let xdivy: i128 = x / y;
    let xmody: i128 = x % y;

    println!("x and y have type i128");
    println!("x: {}, y: {}", x, y);
    println!("xaddy: {}", xaddy);
    println!("xsuby: {}", xsuby);
    println!("xmuly: {}", xmuly);
    println!("xdivy: {}", xdivy);
    println!("xmody: {}\n", xmody);
    
    
    
    /* –ß–∏—Å–ª–∞ —Å –ø–ª–∞–∑–∞—é—â–µ–π —Ç–æ—á–∫–æ–π */
    let x: f64 = 3.5;
    let y: f64 = 0.5;

    let xaddy: f64 = x + y;
    let xsuby: f64 = x - y;
    let xmuly: f64 = x * y;
    let xdivy: f64 = x / y;
    let xmody: f64 = x % y;

    println!("x and y have type f64");
    println!("x: {}, y: {}", x, y);
    println!("xaddy: {}", xaddy);
    println!("xsuby: {}", xsuby);
    println!("xmuly: {}", xmuly);
    println!("xdivy: {}", xdivy);
    println!("xmody: {}\n", xmody);



    /* –ü—Ä–æ—á–∏–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã */
    let flag: bool = true;
    let flag2      = false;
    let ch:   char = 'c';
    let z          = '‚Ñ§';
    let cat        = 'üòª';

    println!("flag:  {}", flag);
    println!("flag2: {}", flag2);
    println!("ch:    {}", ch);
    println!("z:     {}", z);
    println!("cat:   {}\n", cat);
    


    
    
    /* –ö–æ—Ä—Ç–µ–∂–∏ */
    let tup                 = (53, 3.4, 'c', false);
    let color: (u8, u8, u8) = (255, 0, 0);
    let mut mtup            = (1, 2, 3);

    mtup.0 += 1;
    mtup.1 += 1;
    mtup.2 += 1;

    println!("tup:   ({}, {}, {})", tup.0,   tup.1,   tup.2);
    println!("color: ({}, {}, {})", color.0, color.1, color.2);
    println!("mtup:  ({}, {}, {})", mtup.0,  mtup.1,  mtup.2);
    
    
    /* –ú–∞—Å—Å–∏–≤—ã (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ—Ä—Ç–µ–∂–µ–π, —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã) */
    let array         = [1, 2, 3, 4];
    let aru8: [u8; 3] = [1, 2, 0]; // —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä

    println!("array: [{}, {}, {}, {}]", array[0], array[1], array[2], array[3]);
    println!("aru8:  [{}, {}, {}]",     aru8[0],  aru8[1],  aru8[2]);


    return;
}





/* END */
